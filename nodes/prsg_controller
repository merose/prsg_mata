#! /usr/bin/env python
from __future__ import division

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int16

from PyMata.pymata import PyMata

class ControllerNode:

    def __init__(self):
	self.ir_sensors = {
	    "pins": [0, 2, 3, 4, 5],
	}
	self.irPublishers = []

    def main(self):
        rospy.init_node('prsg_controller')
        self.nodeName = rospy.get_name()
        rospy.loginfo("{0} started".format(self.nodeName))

	for pin in self.ir_sensors["pins"]:
	    self.irPublishers.append(rospy.Publisher('~a'+str(pin), Int16, queue_size=10))

        self.rate = float(rospy.get_param('~rate', 10.0))
	self.port = rospy.get_param('~port', '/dev/ttyAMA0')

	board = PyMata(self.port, verbose=True)
	for pin in self.ir_sensors["pins"]:
	    board.enable_analog_reporting(pin)

        rate = rospy.Rate(self.rate)
        self.lastTwistTime = rospy.get_time()
        while not rospy.is_shutdown():
            self.publish()
            rate.sleep()

    def publish(self):
	i = 0
	for pin in self.ir_sensors["pins"]:
	    self.irPublishers[i].publish(board.analog_read(pin))
	    i += 1

if __name__ == '__main__':
    try:
        node = ControllerNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
